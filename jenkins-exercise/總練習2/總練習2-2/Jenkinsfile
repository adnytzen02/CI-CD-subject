pipeline {
    agent {
        kubernetes {
            inheritFrom 'bi2'
            defaultContainer 'p1'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: jnlp
    image: quay.io/flysangel/inbound-agent:4.13-2-jdk11
  - name: p1
    securityContext:
      privileged: true
    image: quay.io/podman/stable:v3.4.7
    command: ["sleep"]
    args: ["infinity"]
  - name: k1
    securityContext:
      privileged: true
    image: quay.io/flysangel/kubectl:1.24.3
    command: ["sleep"]
    args: ["infinity"]
  - name: s1
    securityContext:
      privileged: true
    image: quay.io/flysangel/shellcheck-alpine:v0.8.0
    command: ["sleep"]
    args: ["infinity"]
  - name: a1
    securityContext:
      privileged: true
    image: mj509.flymks.com:9090/mj15r/alpine.httpd:1.0.0
"""
        }
    }
    environment {
        QUAY_ADMIN = credentials('quay-admin-id')
        IMAGE_TAG = 'mj509.flymks.com:9090/mj15r/alpine.bookstore-inventory:1.0.0'
        KUBECONFIG = credentials('kubeconfig-id')
   }
    stages {
        stage ('shellcheck') {
            steps {
               container('s1'){
                  sh 'shellcheck invdb.sh'
                  sh 'shellcheck inventory'
                }
            }
        }
        stage ('Test') {
            steps {
               container('a1'){
                  sh '''#!/bin/bash
                    apk add sqlite
                    mkdir /root/bookstore-inventory
                    cp invdb.sh /root/bookstore-inventory
                    cp inventory /root/bookstore-inventory
                    cd /root/bookstore-inventory
                    bash incdb.sh create
                    mkdir -p /opt/www/cgi-bin
                    cp inventory /opt/www/cgi-bin/
                  '''
                   
                  sh 'curl -s localhost'
                  sh 'curl -s localhost/cgi-bin/inventory'
                  sh 'curl -s localhost/cgi-bin/inventory?id=1'
                  sh 'curl -s localhost/cgi-bin/inventory?isbn=1492090719'
                }
            }
        }
        stage ('build image') {
            steps {
                sh 'podman login --tls-verify=false -u=${QUAY_ADMIN_USR} -p=${QUAY_ADMIN_PSW} mj509.flymks.com:9090'
                sh 'podman build --tls-verify=false -t "${IMAGE_TAG}" .'
                sh 'podman images'
            }
        }
        stage ('push image') {
            steps {
                sh 'podman push --tls-verify=false "${IMAGE_TAG}"'
            }
        }
        stage ('deploy b1') {
            steps {
                container('k1'){

                sh 'mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config'
                sh 'kubectl delete -f pod-b1.yaml || exit 0'
                sh 'kubectl apply -f pod-b1.yaml'
                  }
             }
        }
    }
}
