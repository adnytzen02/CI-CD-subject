四種寫法皆可
[ $?  == 0 ]
[ $? == "0" ]
[ "$?" == "0" ]
[ "$?" == 0 ]
ping -c 1 -w 1 ${ip}  >/dev/null

=====
等待回應時間為一秒 (-w 1)


撰寫一個網路測通程式

ping -c 1 -w 1 ${network}.${ip}
        if [ $?  == 0 ]; then
ping 一個封包 (-c 1) , 等待回應時間為一秒 (-w 1)
-c<完成次数>：设置完成要求回应的次数；
把執行結果內容導向至 /dev/null (空裝置,也就是不會把結果顯示在標準輸出)
當執行指令時都會回傳一個執行後的代碼給變數 $?,
成功的執行完指令後會回傳一個 0 值(有錯誤時會回傳 錯誤代碼).

-c<完成次数>：设置完成要求回应的次数；
=====
ping命令-查詢網路上某台主機是否開著
ping命令用來測試主機之間網路的連通性。 
語法
ping -參數 主機位址
選項
-c<完成次數>：設置完成要求回應的次數
-w 1 等待回應時間為一秒
====
 ping：查詢網路上某台主機是否開著
ping -參數 主機位址
c 次數：送幾次封包給這台主機，然後等待回應
d：設定SO_DEBUG選項
f：大量且快速的送網路封包給一台主機，看它的回應
i 秒數：設定幾秒鐘送一次封包給一台主機，預設值1秒
q：不顯示傳送封包的資訊，只顯示最後結果
l 次數：在次數內，以最快速的方式送封包給一台主機


等待回應時間為一秒 (-w 1)
ping命令
網路測試
ping命令用來測試主機之間網路的連通性。執行ping指令會使用ICMP傳輸協定，發出要求回應的資訊，若遠端主機的網路功能沒有問題，就會回應該資訊，因而得知該主機運作正常。
語法
ping(選項)(參數)
選項
-d：使用Socket的SO_DEBUG功能；
-c<完成次數>：設置完成要求回應的次數；
-f：極限檢測；
-i<間隔秒數>：指定收發資訊的間隔時間；
-I<網路介面>：使用指定的網路介面送出資料包；
-l<前置載入>：設置在送出要求資訊之前，先行發出的資料包；
-n：只輸出數值；
-p<範本樣式>：設置填滿資料包的範本樣式；
-q：不顯示指令執行過程，開頭和結尾的相關資訊除外；
-r：忽略普通的Routing Table，直接將資料包送到遠端主機上；
-R：記錄路由過程；
-s<數據包大小>：設置數據包的大小；
-t<存活數值>：設置存活數值TTL的大小；
-v：詳細顯示指令的執行過程。
參數
目的主機：指定發送ICMP報文的目的主機。
 
=====
~$ cat testip01
#!/bin/bash
read -p "請給IP?" ip
ping -c 1 -w 1 ${ip}

if [ $?  == 0 ]; then
echo  ${ip} '此IP有通'
 else
echo  ${ip} '此IP不通'
fi
echo 'end'
>>>
~$ cat testip02
#!/bin/bash
read -p "請給IP?" ip
ping -c 1 -w 1 ${ip}

if [ $? == "0" ] ; then
echo  ${ip} '此IP有通'
 else
echo  ${ip} '此IP不通'
fi
echo 'end'
>>>
$ cat testip03
#!/bin/bash
read -p "請給IP?" ip
ping -c 1 -w 1 ${ip}
if [ "$?" == "0" ] ; then
echo  ${ip} '此IP有通'
 else
echo  ${ip} '此IP不通'
fi
>>>

#!/bin/bash
read -p "請給IP?" ip
ping -c 1 -w 1 ${ip}
if [ "$?" == 0 ] ; then
echo  ${ip} '此IP有通'
 else
echo  ${ip} '此IP不通'
fi
echo 'end'
>>>
~$ ./testip03
請給IP?127.0.0.1
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.061 ms

--- 127.0.0.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.061/0.061/0.061/0.000 ms
127.0.0.1 此IP有通
end
>>>
~$ cat testip04
#!/bin/bash
read -p "請給IP?" ip
ping -c 1 -w 1 ${ip}  >/dev/null
if [ $? == 0 ]; then
echo  ${ip} '此IP有通'
 else
echo  ${ip} '此IP不通'
fi
echo 'end'
===
~$ ./testip04
請給IP?127.0.0.1
127.0.0.1 此IP有通
end
~$ ./testip04
請給IP?123.4.5.6
123.4.5.6 此IP不通
end
====
> /dev/null
&> /dev/null
> /dev/null 2>&1

===
~$ echo test >t1
~$ cat t1 t2 1>r1 2>r2
~$ cat t1
test
~$ cat t2
cat: t2: No such file or directory
~$ cat r1
test
~$ cat r2
cat: t2: No such file or directory


---
~$ cat t1
test
~$ cat t1 >/dev/null
~$ cat t1 1>/dev/null
~$ cat t1 &>/dev/null


---
~$ cat t2
cat: t2: No such file or directory
~$ cat t2 2>/dev/null
~$ cat t2 &>/dev/null
~$ cat t1 &>/dev/null
----
====
~$ cat tt
cat: tt: No such file or directory
~$ cat tt 2>/dev/null
~$ cat tt 1>/dev/null
cat: tt: No such file or directory
~$ cat tt 2>/dev/null
~$ cat tt &>/dev/null

===
系統將標準輸入/輸出分成三個, 
分別是 
stdin (fd 是 0), 
stdout (fd 是 1), 及 
stderr (fd 是 2), 在這裡 2 代表標準錯誤輸出 stderr.
====
1-標準輸出 2-錯誤輸出 
~$ cat wprog11.sh   1>out1 2>out2
===
& 輸出或錯誤訊息
~$ cat wprog11.sh   &>out3
~$ cat wprog1.sh   &>>out3
===
＆>/dev/null相當>/dev/null  2>&1

沒有加上 “&”, 會視後面的 “1” 為檔案名稱而不是 fd
~$ cat wprog1.sh  > /dev/null
~$ cat /dev/null
~$ cat wprog11.sh  &> /dev/null
~$ cat /dev/null
~$ cat wprog1.sh > /dev/null 2>&1
~$ cat /dev/null





