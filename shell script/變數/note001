# 命名(不能數字開頭、大小寫有分
Name=test
name=12345
echo -e "$Name \t $name"
# test 12345

# 變數名稱只能是英文字母與數字，但是數字不能是開頭字元
12name=victor
# 12name=victor: command not found

# 等號兩邊不能直接接空白字元(=兩邊不能空一格)
name = victor
# Command 'name' not found

# =右邊空一格
name= victor
# Command 'victor' not found


# 變數與變數內容以等號『=』來連結

test=123
test1=abc
test2="12345"
test3='135'
test4=as12df

echo -e "$test \n $test1 \n $test2 \n $test3 \n $test4"

# 若有空白字元可以使用雙引號『 " 』或單引號『 ' 』來將變數內容結合起來。雙引號內保有變數特性

name=victor; myname="variable name is $name"
echo $name
# victor
echo $myname
# variable name is victor

# 利用雙引號將包含單引號及空白的字串，設定給變數 name。
name="victor's name" ; echo $name
# victor's name

# 利用反斜線 \ 跳脫 單引號 與 空白鍵 也可以。
name=victor\'s\ name ; echo $name
# victor's name

# 使用一個定義過的變數，只要在變數名前面加美元符號（$）即可
your_name="hello"

echo $your_name

echo ${your_name}

# 單引號內的變數為一般字元
name=victor; myname='variable name is $name'
echo $name
# victor
echo $myname
# variable name is $name

# 變數 var 後不是數字或英文字元，可以不加雙引號或不用大括號。
var='123456'
var=$var:7890 ; echo $var
# 123456:7890
'''
變數 var 後是數字或英文字元，此例是 1，取變數時會取 var1，
但 var1 沒設定，所以輸出只有 :7890。
'''

var='123456'
var=$var1:7890 ; echo $var
:7890

'''
變數名外面的花括號是可選的，加不加都行，加花括號是為了幫助解釋器識別變數的邊界，比如下面這種情況：
for skill in Ada Coffe Action Java
do
    echo "I am good at ${skill}Script"
done
如果不給skill變數加花括號，寫成echo "I am good at $skillScript"，解釋器就會把$skillScript當成一個變數（其值為空），代碼執行結果就不是我們期望的樣子了。
推薦給所有變數加上花括號，這是個好的編程習慣。

若該變數為擴增變數內容時，
則可用 "$變數名稱" 或 ${變數} 累加內容，
如下所示：
『PATH="$PATH":/home/bin』或
『PATH=${PATH}:/home/bin』
通常大寫字元為系統預設變數，
自行設定變數可以使用小寫字元，
方便判斷 (純粹依照使用者興趣與嗜好) ；

'''

# unset 取消變數
var=1237890 ; echo $var
1237890

unset var; echo $var

'''
在一串指令中，還需要藉由其他的指令提供的資訊，指令先執行：
使用 quote 『 ` command` 』，
符號 ` 是鍵盤上方的數字鍵 1 左邊那個按鍵，而不是單引號。
'''

# 以指令 uname 查詢目前核心版本，並切換到此版本的模組目錄。

uname -r
# 4.15.0-37-generic

cd /lib/modules/`uname -r`
pwd
# /lib/modules/4.15.0-37-generic

'''
使用 $(command) 一樣可以先執行 command，取得結果
'''

cd /lib/modules/$(uname -r)
pwd
# /lib/modules/4.15.0-37-generic

'''
相當於
cat $(echo '/etc/passwd')
dd='/etc/passwd'
cat $dd
'''

# 變數需要在其他子程序執行，則需要以 export 來使變數變成環境變數：
export PROJECT_NAME="Kong"

Env # 查環境變數
